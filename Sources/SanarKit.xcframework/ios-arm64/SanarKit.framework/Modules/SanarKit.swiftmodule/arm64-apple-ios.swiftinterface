// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios17.5 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name SanarKit
import Foundation
@_exported import SanarKit
import Swift
import SwiftUI
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct BWebView : SwiftUI.UIViewRepresentable {
  public let url: Foundation.URL
  public let onNavigationAction: ((Foundation.URL) -> Swift.Void)?
  public let onDataReceived: ((Swift.String) -> Swift.Void)?
  @SwiftUI.Binding @_projectedValueProperty($isNavigationActive) public var isNavigationActive: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating _modify
  }
  public var $isNavigationActive: SwiftUI.Binding<Swift.Bool> {
    get
  }
  public init(url: Foundation.URL, onNavigationAction: ((Foundation.URL) -> Swift.Void)? = nil, onDataReceived: ((Swift.String) -> Swift.Void)? = nil, isNavigationActive: SwiftUI.Binding<Swift.Bool>)
  @_Concurrency.MainActor(unsafe) public func makeUIView(context: SanarKit.BWebView.Context) -> WebKit.WKWebView
  @_Concurrency.MainActor(unsafe) public func updateUIView(_ uiView: WebKit.WKWebView, context: SanarKit.BWebView.Context)
  @_Concurrency.MainActor(unsafe) public func makeCoordinator() -> SanarKit.BWebView.Coordinator
  @objc @_hasMissingDesignatedInitializers public class Coordinator : ObjectiveC.NSObject, WebKit.WKNavigationDelegate, WebKit.WKScriptMessageHandler {
    @objc public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
    @objc public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
    @objc deinit
  }
  public typealias Body = Swift.Never
  public typealias UIViewType = WebKit.WKWebView
}
public struct WebView : SwiftUI.UIViewRepresentable {
  public let url: Foundation.URL
  public let onNavigationAction: ((Foundation.URL) -> Swift.Void)?
  public let onDataReceived: ((Swift.String) -> Swift.Void)?
  @SwiftUI.Binding @_projectedValueProperty($isNavigationActive) public var isNavigationActive: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating _modify
  }
  public var $isNavigationActive: SwiftUI.Binding<Swift.Bool> {
    get
  }
  public init(url: Foundation.URL, onNavigationAction: ((Foundation.URL) -> Swift.Void)? = nil, onDataReceived: ((Swift.String) -> Swift.Void)? = nil, isNavigationActive: SwiftUI.Binding<Swift.Bool>)
  @_Concurrency.MainActor(unsafe) public func makeUIView(context: SanarKit.WebView.Context) -> WebKit.WKWebView
  @_Concurrency.MainActor(unsafe) public func updateUIView(_ uiView: WebKit.WKWebView, context: SanarKit.WebView.Context)
  @_Concurrency.MainActor(unsafe) public func makeCoordinator() -> SanarKit.WebView.Coordinator
  @objc @_hasMissingDesignatedInitializers public class Coordinator : ObjectiveC.NSObject, WebKit.WKNavigationDelegate, WebKit.WKScriptMessageHandler {
    @objc public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
    @objc public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
    @objc deinit
  }
  public typealias Body = Swift.Never
  public typealias UIViewType = WebKit.WKWebView
}
public struct ServiceView : SwiftUI.View {
  @SwiftUI.Binding @_projectedValueProperty($isNavigationActive) public var isNavigationActive: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating _modify
  }
  public var $isNavigationActive: SwiftUI.Binding<Swift.Bool> {
    get
  }
  public init(isNavigationActive: SwiftUI.Binding<Swift.Bool>)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s8SanarKit11ServiceViewV4bodyQrvp", 0) __
}

public struct SanarConnect {
  public static var clientAuth: [Swift.String : Any]?
  public init()
  #if compiler(>=5.3) && $AsyncAwait
  public static func sanarConnect(cid: Swift.String, bundleId: Swift.String, requestBody: [Swift.String : Any]) async throws -> Swift.String
  #endif
  public static func sanarDisconnect()
}
public struct BookingListView : SwiftUI.View {
  @SwiftUI.Binding @_projectedValueProperty($isNavigationActive) public var isNavigationActive: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating _modify
  }
  public var $isNavigationActive: SwiftUI.Binding<Swift.Bool> {
    get
  }
  public init(isNavigationActive: SwiftUI.Binding<Swift.Bool>)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s8SanarKit15BookingListViewV4bodyQrvp", 0) __
}

